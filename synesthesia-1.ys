(define bytecode::(-> (bitvector 8) (bitvector 8)))

(assert
  (forall (r0::(bitvector 32) r1::(bitvector 32) r2::(bitvector 32) r3::(bitvector 32) r4::(bitvector 32) r5::(bitvector 32) r6::(bitvector 32) r7::(bitvector 32))
    (let ((eip0 0x00))
    (let ((state00 (update (lambda (x::(bitvector 3)) r0) (0b000) r0)))
    (let ((state01 (update state00 (0b001) r1)))
    (let ((state02 (update state01 (0b010) r2)))
    (let ((state03 (update state02 (0b011) r3)))
    (let ((state04 (update state03 (0b100) r4)))
    (let ((state05 (update state04 (0b101) r5)))
    (let ((state06 (update state05 (0b110) r6)))
    (let ((state   (update state06 (0b111) r7)))
    (let ((insn0byte (bytecode eip0)))
    (let ((synsem0
      (ite (= (bv-and insn0byte 0xC0) 0x00)
        (let ((lhsreg0 (bv-extract 5 3 insn0byte)))
        (let ((rhsreg0 (bv-extract 2 0 insn0byte)))
        (let ((newstate (update state (lhsreg0) (bv-add (state lhsreg0) (state rhsreg0)))))
          (mk-tuple 0x01 newstate)
        )))
      (ite (= (bv-and insn0byte 0xC0) 0x40)
        (let ((lhsreg0 (bv-extract 5 3 insn0byte)))
        (let ((rhsval0 (bv-concat (bytecode (bv-add eip0 0x03)) (bytecode (bv-add eip0 0x02)) (bytecode (bv-add eip0 0x01)) (bytecode (bv-add eip0 0x00)))))
        (let ((newstate (update state (lhsreg0) (bv-add (state lhsreg0) rhsval0))))
          (mk-tuple 0x05 newstate)
        )))
      (ite (= (bv-and insn0byte 0xC0) 0x80)
        (let ((lhsreg0 (bv-extract 5 3 insn0byte)))
        (let ((rhsreg0 (bv-extract 2 0 insn0byte)))
        (let ((newstate (update state (lhsreg0) (bv-xor (state lhsreg0) (state rhsreg0)))))
          (mk-tuple 0x01 newstate)
        )))
      ; 0xC0 case
        (let ((lhsreg0 (bv-extract 5 3 insn0byte)))
        (let ((rhsval0 (bv-concat (bytecode (bv-add eip0 0x03)) (bytecode (bv-add eip0 0x02)) (bytecode (bv-add eip0 0x01)) (bytecode (bv-add eip0 0x00)))))
        (let ((newstate (update state (lhsreg0) (bv-xor (state lhsreg0) rhsval0))))
          (mk-tuple 0x05 newstate)
        )))
      )))))
    (let ((insn0len (select synsem0 1)))
    (let ((state1   (select synsem0 2)))
      (and
        ; eip beforehand is 0
        (= eip0 0x00)
        (/= insn0len 0x00)
        (= (state1 0b000) (bv-not (state 0b000)))
        (= (state1 0b001) (state 0b001))
        (= (state1 0b010) (state 0b010))
        (= (state1 0b011) (state 0b011))
        (= (state1 0b100) (state 0b100))
        (= (state1 0b101) (state 0b101))
        (= (state1 0b110) (state 0b110))
        (= (state1 0b111) (state 0b111))
      ) ; and
    ))))))))))))) ; let * 12
  ) ; forall
) ; assert

(ef-solve)
(show-model)